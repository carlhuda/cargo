/// Generated by `generate-options.rs` from `options.txt`
use cargo::ops::MessageFormat;

#[derive(RustcDecodable)]
pub struct BuildCommandFlags {
   pub flag_package: Vec<String>, 
   pub flag_all: bool, 
   pub flag_jobs: Option<u32>, 
   pub flag_lib: bool, 
   pub flag_bin: Vec<String>, 
   pub flag_example: Vec<String>, 
   pub flag_test: Vec<String>, 
   pub flag_bench: Vec<String>, 
   pub flag_release: bool, 
   pub flag_features: Vec<String>, 
   pub flag_all_features: bool, 
   pub flag_no_default_features: bool, 
   pub flag_target: Option<String>, 
   pub flag_manifest_path: Option<String>, 
   pub flag_verbose: u32, 
   pub flag_quiet: Option<bool>, 
   pub flag_color: Option<String>, 
   pub flag_message_format: MessageFormat, 
   pub flag_frozen: bool, 
   pub flag_locked: bool, 
}


pub const BUILD_COMMAND_USAGE: &'static str = "
Compile a local package and all of its dependencies

Usage:
    cargo build [options]

Options:
    -h, --help                    Print this message
    -p SPEC, --package SPEC ...   Package to build
    --all                         Build all packages in the workspace
    -j N, --jobs N                Number of parallel jobs, defaults to # of CPUs
    --lib                         Build only this package's library
    --bin NAME                    Build only the specified binary
    --example NAME                Build only the specified example
    --test NAME                   Build only the specified test target
    --bench NAME                  Build only the specified benchmark target
    --release                     Build artifacts in release mode, with optimizations
    --features FEATURES           Space-separated list of features to also build
    --all-features                Build all available features
    --no-default-features         Do not build the `default` feature
    --target TRIPLE               Build for the target triple
    --manifest-path PATH          Path to the manifest of the package to publish
    -v, --verbose ...             Use verbose output (-vv very verbose/build.rs output)
    -q, --quiet                   No output printed to stdout
    --color WHEN                  Coloring: auto, always, never
    --message-format FMT          Error format: human, json [default: human]
    --frozen                      Require Cargo.lock and cache are up to date
    --locked                      Require Cargo.lock is up to date

If the --package argument is given, then SPEC is a package id specification
which indicates which package should be built. If it is not given, then the
current package is built. For more information on SPEC and its format, see the
`cargo help pkgid` command.

All packages in the workspace are built if the `--all` flag is supplied. The
`--all` flag may be supplied in the presence of a virtual manifest.

Compilation can be configured via the use of profiles which are configured in
the manifest. The default profile for this command is `dev`, but passing
the --release flag will use the `release` profile instead.
";


#[derive(RustcDecodable)]
pub struct PublishCommandFlags {
   pub flag_host: Option<String>, 
   pub flag_token: Option<String>, 
   pub flag_no_verify: bool, 
   pub flag_allow_dirty: bool, 
   pub flag_manifest_path: Option<String>, 
   pub flag_jobs: Option<u32>, 
   pub flag_dry_run: bool, 
   pub flag_verbose: u32, 
   pub flag_quiet: Option<bool>, 
   pub flag_color: Option<String>, 
   pub flag_message_format: MessageFormat, 
   pub flag_frozen: bool, 
   pub flag_locked: bool, 
}


pub const PUBLISH_COMMAND_USAGE: &'static str = "
Upload a package to the registry

Usage:
    cargo publish [options]

Options:
    -h, --help             Print this message
    --host HOST            Host to upload the package to
    --token TOKEN          Token to use when uploading
    --no-verify            Don't verify package tarball before publish
    --allow-dirty          Allow publishing with a dirty source directory
    --manifest-path PATH   Path to the manifest of the package to publish
    -j N, --jobs N         Number of parallel jobs, defaults to # of CPUs
    --dry-run              Perform all checks without uploading
    -v, --verbose ...      Use verbose output (-vv very verbose/build.rs output)
    -q, --quiet            No output printed to stdout
    --color WHEN           Coloring: auto, always, never
    --message-format FMT   Error format: human, json [default: human]
    --frozen               Require Cargo.lock and cache are up to date
    --locked               Require Cargo.lock is up to date

";


